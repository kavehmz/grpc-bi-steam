// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: hub/service_hub.proto

package segmented

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServiceHub_CallHTTP_FullMethodName  = "/hub.ServiceHub/CallHTTP"
	ServiceHub_RelayHTTP_FullMethodName = "/hub.ServiceHub/RelayHTTP"
)

// ServiceHubClient is the client API for ServiceHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceHubClient interface {
	CallHTTP(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_CallHTTPClient, error)
	RelayHTTP(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_RelayHTTPClient, error)
}

type serviceHubClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHubClient(cc grpc.ClientConnInterface) ServiceHubClient {
	return &serviceHubClient{cc}
}

func (c *serviceHubClient) CallHTTP(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_CallHTTPClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceHub_ServiceDesc.Streams[0], ServiceHub_CallHTTP_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHubCallHTTPClient{ClientStream: stream}
	return x, nil
}

type ServiceHub_CallHTTPClient interface {
	Send(*CallHTTPRequest) error
	Recv() (*CallHTTPResponse, error)
	grpc.ClientStream
}

type serviceHubCallHTTPClient struct {
	grpc.ClientStream
}

func (x *serviceHubCallHTTPClient) Send(m *CallHTTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceHubCallHTTPClient) Recv() (*CallHTTPResponse, error) {
	m := new(CallHTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceHubClient) RelayHTTP(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_RelayHTTPClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceHub_ServiceDesc.Streams[1], ServiceHub_RelayHTTP_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHubRelayHTTPClient{ClientStream: stream}
	return x, nil
}

type ServiceHub_RelayHTTPClient interface {
	Send(*CallHTTPResponse) error
	Recv() (*CallHTTPRequest, error)
	grpc.ClientStream
}

type serviceHubRelayHTTPClient struct {
	grpc.ClientStream
}

func (x *serviceHubRelayHTTPClient) Send(m *CallHTTPResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceHubRelayHTTPClient) Recv() (*CallHTTPRequest, error) {
	m := new(CallHTTPRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceHubServer is the server API for ServiceHub service.
// All implementations must embed UnimplementedServiceHubServer
// for forward compatibility
type ServiceHubServer interface {
	CallHTTP(ServiceHub_CallHTTPServer) error
	RelayHTTP(ServiceHub_RelayHTTPServer) error
	mustEmbedUnimplementedServiceHubServer()
}

// UnimplementedServiceHubServer must be embedded to have forward compatible implementations.
type UnimplementedServiceHubServer struct {
}

func (UnimplementedServiceHubServer) CallHTTP(ServiceHub_CallHTTPServer) error {
	return status.Errorf(codes.Unimplemented, "method CallHTTP not implemented")
}
func (UnimplementedServiceHubServer) RelayHTTP(ServiceHub_RelayHTTPServer) error {
	return status.Errorf(codes.Unimplemented, "method RelayHTTP not implemented")
}
func (UnimplementedServiceHubServer) mustEmbedUnimplementedServiceHubServer() {}

// UnsafeServiceHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceHubServer will
// result in compilation errors.
type UnsafeServiceHubServer interface {
	mustEmbedUnimplementedServiceHubServer()
}

func RegisterServiceHubServer(s grpc.ServiceRegistrar, srv ServiceHubServer) {
	s.RegisterService(&ServiceHub_ServiceDesc, srv)
}

func _ServiceHub_CallHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceHubServer).CallHTTP(&serviceHubCallHTTPServer{ServerStream: stream})
}

type ServiceHub_CallHTTPServer interface {
	Send(*CallHTTPResponse) error
	Recv() (*CallHTTPRequest, error)
	grpc.ServerStream
}

type serviceHubCallHTTPServer struct {
	grpc.ServerStream
}

func (x *serviceHubCallHTTPServer) Send(m *CallHTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceHubCallHTTPServer) Recv() (*CallHTTPRequest, error) {
	m := new(CallHTTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceHub_RelayHTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceHubServer).RelayHTTP(&serviceHubRelayHTTPServer{ServerStream: stream})
}

type ServiceHub_RelayHTTPServer interface {
	Send(*CallHTTPRequest) error
	Recv() (*CallHTTPResponse, error)
	grpc.ServerStream
}

type serviceHubRelayHTTPServer struct {
	grpc.ServerStream
}

func (x *serviceHubRelayHTTPServer) Send(m *CallHTTPRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceHubRelayHTTPServer) Recv() (*CallHTTPResponse, error) {
	m := new(CallHTTPResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceHub_ServiceDesc is the grpc.ServiceDesc for ServiceHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub.ServiceHub",
	HandlerType: (*ServiceHubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallHTTP",
			Handler:       _ServiceHub_CallHTTP_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RelayHTTP",
			Handler:       _ServiceHub_RelayHTTP_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub/service_hub.proto",
}
