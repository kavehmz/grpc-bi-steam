// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: hub/service_hub.proto

package segmented

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ServiceHub_RelayCall_FullMethodName         = "/hub.ServiceHub/RelayCall"
	ServiceHub_ServeServiceCalls_FullMethodName = "/hub.ServiceHub/ServeServiceCalls"
)

// ServiceHubClient is the client API for ServiceHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceHubClient interface {
	RelayCall(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_RelayCallClient, error)
	ServeServiceCalls(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_ServeServiceCallsClient, error)
}

type serviceHubClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceHubClient(cc grpc.ClientConnInterface) ServiceHubClient {
	return &serviceHubClient{cc}
}

func (c *serviceHubClient) RelayCall(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_RelayCallClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceHub_ServiceDesc.Streams[0], ServiceHub_RelayCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHubRelayCallClient{ClientStream: stream}
	return x, nil
}

type ServiceHub_RelayCallClient interface {
	Send(*CallHTTPRequest) error
	Recv() (*CallHTTPResponse, error)
	grpc.ClientStream
}

type serviceHubRelayCallClient struct {
	grpc.ClientStream
}

func (x *serviceHubRelayCallClient) Send(m *CallHTTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceHubRelayCallClient) Recv() (*CallHTTPResponse, error) {
	m := new(CallHTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceHubClient) ServeServiceCalls(ctx context.Context, opts ...grpc.CallOption) (ServiceHub_ServeServiceCallsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceHub_ServiceDesc.Streams[1], ServiceHub_ServeServiceCalls_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &serviceHubServeServiceCallsClient{ClientStream: stream}
	return x, nil
}

type ServiceHub_ServeServiceCallsClient interface {
	Send(*ServiceCall) error
	Recv() (*CallHTTPRequest, error)
	grpc.ClientStream
}

type serviceHubServeServiceCallsClient struct {
	grpc.ClientStream
}

func (x *serviceHubServeServiceCallsClient) Send(m *ServiceCall) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceHubServeServiceCallsClient) Recv() (*CallHTTPRequest, error) {
	m := new(CallHTTPRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceHubServer is the server API for ServiceHub service.
// All implementations must embed UnimplementedServiceHubServer
// for forward compatibility
type ServiceHubServer interface {
	RelayCall(ServiceHub_RelayCallServer) error
	ServeServiceCalls(ServiceHub_ServeServiceCallsServer) error
	mustEmbedUnimplementedServiceHubServer()
}

// UnimplementedServiceHubServer must be embedded to have forward compatible implementations.
type UnimplementedServiceHubServer struct {
}

func (UnimplementedServiceHubServer) RelayCall(ServiceHub_RelayCallServer) error {
	return status.Errorf(codes.Unimplemented, "method RelayCall not implemented")
}
func (UnimplementedServiceHubServer) ServeServiceCalls(ServiceHub_ServeServiceCallsServer) error {
	return status.Errorf(codes.Unimplemented, "method ServeServiceCalls not implemented")
}
func (UnimplementedServiceHubServer) mustEmbedUnimplementedServiceHubServer() {}

// UnsafeServiceHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceHubServer will
// result in compilation errors.
type UnsafeServiceHubServer interface {
	mustEmbedUnimplementedServiceHubServer()
}

func RegisterServiceHubServer(s grpc.ServiceRegistrar, srv ServiceHubServer) {
	s.RegisterService(&ServiceHub_ServiceDesc, srv)
}

func _ServiceHub_RelayCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceHubServer).RelayCall(&serviceHubRelayCallServer{ServerStream: stream})
}

type ServiceHub_RelayCallServer interface {
	Send(*CallHTTPResponse) error
	Recv() (*CallHTTPRequest, error)
	grpc.ServerStream
}

type serviceHubRelayCallServer struct {
	grpc.ServerStream
}

func (x *serviceHubRelayCallServer) Send(m *CallHTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceHubRelayCallServer) Recv() (*CallHTTPRequest, error) {
	m := new(CallHTTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceHub_ServeServiceCalls_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceHubServer).ServeServiceCalls(&serviceHubServeServiceCallsServer{ServerStream: stream})
}

type ServiceHub_ServeServiceCallsServer interface {
	Send(*CallHTTPRequest) error
	Recv() (*ServiceCall, error)
	grpc.ServerStream
}

type serviceHubServeServiceCallsServer struct {
	grpc.ServerStream
}

func (x *serviceHubServeServiceCallsServer) Send(m *CallHTTPRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceHubServeServiceCallsServer) Recv() (*ServiceCall, error) {
	m := new(ServiceCall)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceHub_ServiceDesc is the grpc.ServiceDesc for ServiceHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub.ServiceHub",
	HandlerType: (*ServiceHubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RelayCall",
			Handler:       _ServiceHub_RelayCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ServeServiceCalls",
			Handler:       _ServiceHub_ServeServiceCalls_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hub/service_hub.proto",
}
